Kind.Parser.let(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.block("let", Parser {
    Kind.Parser.text("let ")
    get name = Kind.Parser.name1
    Kind.Parser.text("=")
    get expr = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = body(unit)
    return Kind.Term.let(name, expr, (x) body)
  })

Kind.Parser.let.omit(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.block("let", Parser {
    get name = Kind.Parser.name1
    Kind.Parser.text("= ")
    get expr = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = body(unit)
    return Kind.Term.let(name, expr, (x) body)
  })

Kind.Parser.let.abort(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.block("let", Parser {
    Kind.Parser.text("let ")
    get name = Kind.Parser.name1
    Kind.Parser.text("=")
    get expr = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    Kind.Parser.text("abort")
    get abor = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = body(unit)
    let term = expr
    let term = Kind.Term.app(term, Kind.Term.lam("", () Kind.Term.hol(Bits.e)))
    let term = Kind.Term.app(term, abor)
    let term = Kind.Term.app(term, Kind.Term.lam(name, () body))
    return term
  })
