Kind.Parser.letforinmap(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.block("let-for-map", Parser {
    Kind.Parser.text("let ")
    get name = Kind.Parser.name1
    Kind.Parser.text("=")
    Kind.Parser.text("for ")
    get key = Kind.Parser.name1
    Kind.Parser.text(":")
    get val = Kind.Parser.name1
    Kind.Parser.text("in")
    get map = Kind.Parser.term
    Kind.Parser.text(":")
    get loop = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = body(unit)
    let term = Kind.Term.ref("BBT.for")
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
    let term = Kind.Term.app(term, map)
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
    let term = Kind.Term.app(term, Kind.Term.ref(name))
    let lamb = Kind.Term.lam(key, (k) Kind.Term.lam(val, (i) Kind.Term.lam(name, (x) loop)))
    let term = Kind.Term.app(term, lamb)
    let term = Kind.Term.let(name, term, (x) body)
    return term
  })

Kind.Parser.letforinmap.with(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.block("for-map", Parser {
    Kind.Parser.text("for ")
    get key = Kind.Parser.name1
    Kind.Parser.text(":")
    get val = Kind.Parser.name1
    Kind.Parser.text("in")
    get map = Kind.Parser.term
    Kind.Parser.text("with")
    get name = Kind.Parser.name1
    Kind.Parser.text(":")
    get loop = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = body(unit)
    let term = Kind.Term.ref("BBT.for")
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
    let term = Kind.Term.app(term, map)
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
    let term = Kind.Term.app(term, Kind.Term.ref(name))
    let lamb = Kind.Term.lam(key, (k) Kind.Term.lam(val, (i) Kind.Term.lam(name, (x) loop)))
    let term = Kind.Term.app(term, lamb)
    let term = Kind.Term.let(name, term, (x) body)
    return term
  })
