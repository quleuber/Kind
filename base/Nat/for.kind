Nat.for<S: Type>(state: S, from: Nat, til: Nat, func: Nat -> S -> S): S
  if Nat.eql(from, til) then
    state
  else
    Nat.for<S>(func(from, state), Nat.succ(from), til, func)

Nat.for.io(from: Nat, to: Nat, action: Nat -> IO<Unit>): IO<Unit>
  if Nat.eql(from, to) then IO {
    return unit
  } else IO {
    action(from)
    Nat.for.io(Nat.succ(from), to, action)
  }
